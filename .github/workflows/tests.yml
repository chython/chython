name: Tests

on:
  push:
    branches: [ main, master, tests_update ]
  pull_request:
    branches: [ main, master, tests_update ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds (required)
          - os: ubuntu-latest
            python-version: "3.8"
            extra_deps: "importlib_resources"
            experimental: false
          - os: ubuntu-latest
            python-version: "3.9"
            extra_deps: ""
            experimental: false
          - os: ubuntu-latest
            python-version: "3.10"
            extra_deps: ""
            experimental: false
          - os: ubuntu-latest
            python-version: "3.11"
            extra_deps: ""
            experimental: false
          # Windows builds (allowed to fail)
          - os: windows-latest
            python-version: "3.8"
            extra_deps: "importlib_resources"
            experimental: true
          - os: windows-latest
            python-version: "3.9"
            extra_deps: ""
            experimental: true
          - os: windows-latest
            python-version: "3.10"
            extra_deps: ""
            experimental: true
          - os: windows-latest
            python-version: "3.11"
            extra_deps: ""
            experimental: true

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'  # Cache pip dependencies
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc g++ gfortran
        gcc --version  # Print version for debugging
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
    
    - name: Install Cython and core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "cython>=3.0.5" setuptools wheel
        if [ "${{ matrix.extra_deps }}" != "" ]; then
          pip install ${{ matrix.extra_deps }}
        fi
      shell: bash
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure Poetry (Windows)
      if: runner.os == 'Windows'
      run: |
        $env:Path += ";$env:APPDATA\Python\Scripts"
        poetry config installer.max-workers 4
      shell: pwsh

    - name: Configure Poetry (Linux)
      if: runner.os == 'Linux'
      run: |
        poetry config installer.max-workers 4
      shell: bash

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('**/*.pyx') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev
      env:
        PATH: ${{ env.PATH }};${{ env.APPDATA }}\Python\Scripts
      timeout-minutes: 15
    
    - name: Clean Cython build
      shell: bash
      run: |
        rm -rf build/
        rm -rf *.so
        find . -name "*.c" -delete || true
    
    - name: Force Cython recompilation
      run: poetry run pip install -e . --no-deps --force-reinstall
    
    - name: Install test dependencies
      run: |
        poetry run pip install pytest-html pytest-cov
      shell: bash

    - name: Run tests
      run: |
        mkdir -p test-results
        poetry run pytest tests/ -v --durations=10 --cache-clear \
          --junitxml=test-results/junit.xml \
          --html=test-results/report.html \
          --cov=chython \
          --cov-report=html:test-results/coverage \
          --cov-report=xml:test-results/coverage.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          test-results/
          .pytest_cache/
        retention-days: 7

    - name: Upload coverage to Codecov
      if: runner.os == 'Linux' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: test-results/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false 